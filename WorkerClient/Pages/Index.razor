@page "/"
@using WorkerClient.Models
@using Client.Data
@using System.Text.Json
@using System.Collections.ObjectModel
@inject ITest tst
<h3>Orders</h3> 
<button class="btn" @onclick="() => Ding()">
    Refresh
</button>
@if (orders == null) {
    <p>
        <em>Loading...</em>
    </p>
}
else if (!orders.Any()) {
    <p>
        <em>loading menu.....</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>items</th>
            <th>adress</th>
            <th>
                <h7 style="color:tomato;">
                    üóëÔ∏è
                </h7>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in orders)
        {
            <tr>
                <td>
                    @item.items
                </td>
                <td>
                    @item.adr
                </td>
                <td>
                    <button class="btn" @onclick="() => Dong()">
                        <h7 style="color:tomato;">
                            -remove-
                        </h7>
                    </button>
                </td>
                <!--<td>/td>-->
                <td>
                </td>
            </tr>
        }
        </tbody>
    </table>




@code {
    private static string listuri = "http://localhost:8080/orders/";
    private static int x = 0;
    static OrderObject oItem = new OrderObject();
    static IList<OrderObject> orders = new Collection<OrderObject>();
    OrderObject o = new OrderObject();

    
    protected override async Task OnInitializedAsync()
    {
        orders.Clear();
        orders.Add(await tst.ReceiveOrdersAsync(0));
    /*for (int x = 1;tst.ReceiveOrdersAsync(x) != null; x++)
        {
            orders.Add(await tst.ReceiveOrdersAsync(x));
        }*/
        
        try {
            for (int x = 0; x < orders[0].ordernumber ; x++)
                {
                    Console.WriteLine(orders[0].adr);
                    Console.WriteLine("x i loop: "+x);
                    orders.Add(await tst.ReceiveOrdersAsync(x));
                }
            
        }
        catch(Exception e){}
        Console.WriteLine(orders.Count);
    }


    public async Task Ding()
    {
        orders.Clear();
        try {
            if (tst.ReceiveOrdersAsync(x) != null)
            {
                for (int x = 0; tst.ReceiveOrdersAsync(x) != null; x++)
                {
                    orders.Add(await tst.ReceiveOrdersAsync(x));
                }
                
            }
            
        }catch(Exception e){}
    }

    public void Dong()
    {
        
    }

}
}
